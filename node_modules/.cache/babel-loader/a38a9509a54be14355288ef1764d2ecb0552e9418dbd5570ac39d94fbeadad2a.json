{"ast":null,"code":"var _jsxFileName = \"D:\\\\PomoPulse\\\\pomopulse\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as MUI from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AlertComponent(props) {\n  return /*#__PURE__*/_jsxDEV(MUI.Alert, {\n    severity: \"error\",\n    children: [/*#__PURE__*/_jsxDEV(MUI.AlertTitle, {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), \"This is an error alert - \", /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"check it out!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_c = AlertComponent;\nfunction Timer() {\n  _s();\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null);\n  const [timer, setTimer] = useState('00:00:00');\n  const [isRunning, setIsRunning] = useState(false);\n  const [endTime, setEndTime] = useState(null);\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n  const startTimer = useCallback(e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the beginning of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  }, []);\n  const clearTimer = useCallback(e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n\n    // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n    if (isRunning) {\n      if (Ref.current) clearInterval(Ref.current);\n      const id = setInterval(() => {\n        startTimer(endTime);\n      }, 1000);\n      Ref.current = id;\n    } else {\n      if (Ref.current) clearInterval(Ref.current);\n    }\n  }, [isRunning, endTime, startTimer]);\n  const getDeadTime = () => {\n    let deadline = new Date();\n\n    // This is where you need to adjust if \n    // you entend to add more time\n    deadline.setSeconds(deadline.getSeconds() + 60);\n    return deadline;\n  };\n  const toggleTimer = () => {\n    if (!isRunning) {\n      const currentTime = new Date();\n      const remainingTime = getTimeRemaining(endTime).total;\n      setEndTime(new Date(currentTime.getTime() + remainingTime));\n    }\n    setIsRunning(prevIsRunning => !prevIsRunning);\n  };\n\n  // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n\n  // We put empty array to act as componentDid\n  // mount only\n  useEffect(() => {\n    if (isRunning) {\n      clearTimer();\n    }\n  }, [isRunning, clearTimer]);\n\n  // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTimer,\n      children: isRunning ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"T/N7VLf2k1G8LguLctRAaRAPEYc=\");\n_c2 = Timer;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AlertComponent\");\n$RefreshReg$(_c2, \"Timer\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","logo","MUI","jsxDEV","_jsxDEV","AlertComponent","props","Alert","severity","children","AlertTitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","Timer","_s","Ref","timer","setTimer","isRunning","setIsRunning","endTime","setEndTime","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","toggleTimer","currentTime","remainingTime","getTime","prevIsRunning","onClickReset","className","onClick","_c2","App","_c3","$RefreshReg$"],"sources":["D:/PomoPulse/pomopulse/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as MUI from '@mui/material';\n\n\nfunction AlertComponent(props) {\n    return (\n        <MUI.Alert severity=\"error\">\n            <MUI.AlertTitle>Error</MUI.AlertTitle>\n            This is an error alert - <strong>check it out!</strong>\n        </MUI.Alert>\n    );\n}\n\nfunction Timer(){\n    // We need ref in this, because we are dealing\n    // with JS setInterval to keep track of it and\n    // stop it when needed\n    const Ref = useRef(null);\n    const [timer, setTimer] = useState('00:00:00');\n    const [isRunning, setIsRunning] = useState(false);\n    const [endTime, setEndTime] = useState(null);\n  \n    const getTimeRemaining = (e) => {\n        const total = Date.parse(e) - Date.parse(new Date());\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n        return {\n            total, hours, minutes, seconds\n        };\n    }\n  \n  \n    const startTimer = useCallback((e) => {\n        let { total, hours, minutes, seconds } \n                    = getTimeRemaining(e);\n        if (total >= 0) {\n  \n            // update the timer\n            // check if less than 10 then we need to \n            // add '0' at the beginning of the variable\n            setTimer(\n                (hours > 9 ? hours : '0' + hours) + ':' +\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\n                + (seconds > 9 ? seconds : '0' + seconds)\n            )\n        }\n    }, []);\n  \n  \n    const clearTimer = useCallback((e) => {\n  \n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next    \n  \n        // If you try to remove this line the \n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (isRunning) {\n            if (Ref.current) clearInterval(Ref.current);\n            const id = setInterval(() => {\n              startTimer(endTime);\n            }, 1000);\n            Ref.current = id;\n          } else {\n            if (Ref.current) clearInterval(Ref.current);\n          }\n        }, [isRunning, endTime, startTimer]);\n  \n    const getDeadTime = () => {\n        let deadline = new Date();\n  \n        // This is where you need to adjust if \n        // you entend to add more time\n        deadline.setSeconds(deadline.getSeconds() + 60);\n        return deadline;\n    }\n\n    const toggleTimer = () => {\n        if (!isRunning) {\n          const currentTime = new Date();\n          const remainingTime = getTimeRemaining(endTime).total;\n          setEndTime(new Date(currentTime.getTime() + remainingTime));\n        }\n        setIsRunning((prevIsRunning) => !prevIsRunning);\n      };\n  \n    // We can use useEffect so that when the component\n    // mount the timer will start as soon as possible\n  \n    // We put empty array to act as componentDid\n    // mount only\n    useEffect(() => {\n        if (isRunning) {\n          clearTimer();\n        }\n      }, [isRunning, clearTimer]);\n  \n    // Another way to call the clearTimer() to start\n    // the countdown is via action event from the\n    // button first we create function to be called\n    // by the button\n    const onClickReset = () => {\n        clearTimer(getDeadTime());\n    }\n  \n    return (\n        <div className=\"App\">\n            <p className=\"timer\">{timer}</p>\n            <button onClick={toggleTimer}>{isRunning ? 'Pause' : 'Play'}</button>\n            <button onClick={onClickReset}>Reset</button>\n        </div>\n    )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Timer></Timer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}