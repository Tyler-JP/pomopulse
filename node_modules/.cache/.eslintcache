[{"D:\\PomoPulse\\pomopulse\\src\\index.js":"1","D:\\PomoPulse\\pomopulse\\src\\reportWebVitals.js":"2","D:\\PomoPulse\\pomopulse\\src\\App.js":"3"},{"size":535,"mtime":1682933159879,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1682914984336,"results":"6","hashOfConfig":"5"},{"size":2618,"mtime":1683146895950,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ezs907",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"D:\\PomoPulse\\pomopulse\\src\\index.js",[],[],"D:\\PomoPulse\\pomopulse\\src\\reportWebVitals.js",[],[],[],"D:\\PomoPulse\\pomopulse\\src\\App.js",["19"],[],"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './App.css';\nimport './timerButtons.css';\nimport * as MUI from '@mui/material';\n\n\nfunction AlertComponent(props) {\n    return (\n        <MUI.Alert severity=\"error\">\n            <MUI.AlertTitle>Error</MUI.AlertTitle>\n            This is an error alert - <strong>check it out!</strong>\n        </MUI.Alert>\n    );\n}\n\nfunction Timer() {\n    const Ref = useRef(null);\n    const [timer, setTimer] = useState('01:00');\n    const [isRunning, setIsRunning] = useState(false);\n    const [remainingTime, setRemainingTime] = useState(60000);\n  \n    const getTimeRemaining = (time) => {\n      const total = time;\n      const seconds = Math.floor((total / 1000) % 60);\n      const minutes = Math.floor((total / 1000 / 60) % 60);\n      return {\n        total,\n        minutes,\n        seconds,\n      };\n    };\n  \n    const startTimer = useCallback(() => {\n      let { total, minutes, seconds } = getTimeRemaining(remainingTime);\n      if (total >= 0) {\n        setTimer(\n            (minutes > 9 ? minutes : '0' + minutes) +\n            ':' +\n            (seconds > 9 ? seconds : '0' + seconds)\n        );\n        if (isRunning) {\n          Ref.current = setTimeout(() => {\n            setRemainingTime((prevRemainingTime) => prevRemainingTime - 1000);\n            startTimer();\n          }, 1000);\n        }\n      }\n    }, [remainingTime, isRunning]);\n  \n    useEffect(() => {\n      if (isRunning) {\n        if (Ref.current) clearTimeout(Ref.current);\n        startTimer();\n        return () => clearTimeout(Ref.current);\n      }\n    }, [isRunning, startTimer]);\n  \n    const resetTimer = () => {\n      setRemainingTime(60000);\n      setTimer('01:00');\n    };\n  \n    const toggleTimer = () => {\n      setIsRunning((prevIsRunning) => !prevIsRunning);\n    };\n  \n    return (\n        <div className=\"App\">\n            <button className=\"timer-button\" style={{ \"--clr\": \"#0e7a04\" }} onClick={resetTimer}>\n              <span>Reset!</span>\n              <div className=\"animation\"></div>\n            </button>\n          <p className=\"timer\">{timer}</p>\n          <div className=\"play-pause-container\">\n            <button className=\"timer-button\" style={{ \"--clr\": \"#0e7a04\" }} onClick={toggleTimer}>\n              <span>{isRunning ? 'Pause' : 'Play'}</span>\n              <div className=\"animation\"></div>\n            </button>\n          </div>\n        </div>\n      );\n           \n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Timer></Timer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","severity":1,"message":"21","line":7,"column":10,"nodeType":"22","messageId":"23","endLine":7,"endColumn":24},"no-unused-vars","'AlertComponent' is defined but never used.","Identifier","unusedVar"]